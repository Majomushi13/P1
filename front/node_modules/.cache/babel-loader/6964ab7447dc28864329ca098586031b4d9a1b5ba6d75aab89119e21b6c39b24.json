{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Lista de Tareas\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"id\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_3 = [\"for\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tasks, task => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: task.id,\n      \"onUpdate:modelValue\": $event => task.completed = $event,\n      onChange: $event => $options.updateTask(task)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2), [[_vModelCheckbox, task.completed]]), _createElementVNode(\"label\", {\n      for: task.id,\n      class: _normalizeClass({\n        completed: task.completed\n      })\n    }, _toDisplayString(task.title), 11 /* TEXT, CLASS, PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newTaskTitle = $event),\n    placeholder: \"Nueva tarea\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newTaskTitle]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addTask && $options.addTask(...args))\n  }, \"Agregar Tarea\")]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","tasks","task","key","id","type","$event","completed","onChange","$options","updateTask","_hoisted_2","for","class","_normalizeClass","title","_hoisted_3","_cache","newTaskTitle","placeholder","onClick","args","addTask"],"sources":["C:\\Users\\HP\\Documents\\P1\\front\\src\\components\\TaskList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista de Tareas</h1>\r\n    <ul>\r\n      <li v-for=\"task in tasks\" :key=\"task.id\">\r\n        <input type=\"checkbox\" :id=\"task.id\" v-model=\"task.completed\" @change=\"updateTask(task)\" />\r\n        <label :for=\"task.id\" :class=\"{ completed: task.completed }\">{{ task.title }}</label>\r\n      </li>\r\n    </ul>\r\n    <input v-model=\"newTaskTitle\" placeholder=\"Nueva tarea\" />\r\n    <button @click=\"addTask\">Agregar Tarea</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { request } from 'graphql-request';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tasks: [],\r\n      newTaskTitle: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchTasks() {\r\n      const query = `\r\n        {\r\n          tasks {\r\n            id\r\n            title\r\n            completed\r\n          }\r\n        }\r\n      `;\r\n\r\n      try {\r\n        const data = await request('http://localhost:4000/graphql', query);\r\n        this.tasks = data.tasks;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async addTask() {\r\n      if (!this.newTaskTitle.trim()) return;\r\n\r\n      const mutation = `\r\n        mutation($title: String!) {\r\n          addTask(title: $title) {\r\n            id\r\n            title\r\n            completed\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = { title: this.newTaskTitle.trim() };\r\n\r\n      try {\r\n        const data = await request('http://localhost:4000/graphql', mutation, variables);\r\n        this.tasks.push(data.addTask);\r\n        this.newTaskTitle = ''; // Limpiar el campo despu√©s de agregar\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async updateTask(task) {\r\n      const mutation = `\r\n        mutation($id: ID!, $completed: Boolean!) {\r\n          updateTask(id: $id, completed: $completed) {\r\n            id\r\n            title\r\n            completed\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = {\r\n        id: task.id,\r\n        completed: task.completed,\r\n      };\r\n\r\n      try {\r\n        await request('http://localhost:4000/graphql', mutation, variables);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchTasks();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.completed {\r\n  text-decoration: line-through;\r\n}\r\n</style>\r\n"],"mappings":";gCAEIA,mBAAA,CAAwB,YAApB,iBAAe;mBAFvB;mBAAA;;uBACEC,mBAAA,CAUM,cATJC,UAAwB,EACxBF,mBAAA,CAKK,c,kBAJHC,mBAAA,CAGKE,SAAA,QAPXC,WAAA,CAIyBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfN,mBAAA,CAGK;MAHsBO,GAAG,EAAED,IAAI,CAACE;wBACnCT,mBAAA,CAA2F;MAApFU,IAAI,EAAC,UAAU;MAAED,EAAE,EAAEF,IAAI,CAACE,EAAE;MAL3C,uBAAAE,MAAA,IAKsDJ,IAAI,CAACK,SAAS,GAAAD,MAAA;MAAGE,QAAM,EAAAF,MAAA,IAAEG,QAAA,CAAAC,UAAU,CAACR,IAAI;6CAL9FS,UAAA,I,kBAKsDT,IAAI,CAACK,SAAS,E,GAC5DZ,mBAAA,CAAqF;MAA7EiB,GAAG,EAAEV,IAAI,CAACE,EAAE;MAAGS,KAAK,EANpCC,eAAA;QAAAP,SAAA,EAMmDL,IAAI,CAACK;MAAS;wBAAOL,IAAI,CAACa,KAAK,gCANlFC,UAAA,E;oDASIrB,mBAAA,CAA0D;IAT9D,uBAAAsB,MAAA,QAAAA,MAAA,MAAAX,MAAA,IASoBN,KAAA,CAAAkB,YAAY,GAAAZ,MAAA;IAAEa,WAAW,EAAC;iDAA1BnB,KAAA,CAAAkB,YAAY,E,GAC5BvB,mBAAA,CAA+C;IAAtCyB,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEZ,QAAA,CAAAa,OAAA,IAAAb,QAAA,CAAAa,OAAA,IAAAD,IAAA,CAAO;KAAE,eAAa,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}